{
  
    
        "post0": {
            "title": "TPT Notes",
            "content": "TPT Notes: . Week 1 - 8/23 Notes: . Python - weakly type language | Java - strongly type language . | In Java, you have to declare data types | In Python it automatically changes data types | Java is OOP . | Primitive Data Types Boolean | Character | Integer | Double/Float | Long | Short | | . | Non-Primitive: (classes) String | Array | etc. | . | Wrapper class - contains methods (functions) | | Opening notebook - vs code &gt; apcsa repo &gt; notebooks directory | .",
            "url": "https://natalie-beckwith.github.io/fastpages/markdown/2022/08/23/TPTNotes.html",
            "relUrl": "/markdown/2022/08/23/TPTNotes.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Tech Talk 1.0 Hacks | Tools & Equipment",
            "content": "Hello! . Welcome to my first post! :) .",
            "url": "https://natalie-beckwith.github.io/fastpages/markdown/2022/08/22/First-Post.html",
            "relUrl": "/markdown/2022/08/22/First-Post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Primitive Data Types",
            "content": "public void randomIntFinder(Scanner scanner) { try { System.out.printf(&quot;Enter 2 numbers and get a random &quot; + &quot;integer between those two numbers! n&quot;); scanner = new Scanner(System.in); System.out.printf(&quot;Enter the first integer: &quot;); int intRange1 = scanner.nextInt(); System.out.printf(&quot;Enter the next integer: &quot;); int intRange2 = scanner.nextInt(); Random random = new Random(); int randomInt = random.nextInt(intRange1, intRange2 + 1); System.out.printf(&quot;Random number between %d and %d: %d n n&quot;, intRange1, intRange2, randomInt); } catch (IllegalArgumentException e) { System.out.printf(&quot;Error: The last number must be greater than the first! n&quot;); } catch (InputMismatchException e) { System.out.printf(&quot;Error: Must be type integer! n&quot;); } } public void doubleAddingCalculator(Scanner scanner) { try { System.out.printf(&quot;Enter 2 decimals to get their sum! n&quot;); System.out.printf(&quot;Enter the first double: &quot;); double firstDouble = scanner.nextDouble(); System.out.printf(&quot;Enter the next double: &quot;); double lastDouble = scanner.nextDouble(); firstDouble += lastDouble; System.out.printf(&quot;Sum: %f n n&quot;, firstDouble); } catch (InputMismatchException e) { System.out.printf(&quot;Error: Must be type double! n&quot;); } } public void getRomanNumerals(Scanner scanner) { System.out.print(&quot;Enter any number: &quot;); int num = scanner.nextInt(); String numeral = convertRomanNumeral(num); System.out.print(&quot;Roman numeral: &quot; + numeral); } /* * Takes the number passed in and returns a string of the Roman Numeral */ public static String convertRomanNumeral(int number) { // calculates number of 1000s int _1000 = (number / 1000); String value = numToRN(_1000 * 1000); number -= _1000 * 1000; // calculates number of 100s int _100 = (number / 100); String value1 = numToRN(_100 * 100); number -= _100 * 100; // calculates number of 10s int _10 = (number / 10); String value2 = numToRN(_10 * 10); number -= _10 * 10; // calculates number of 1s int _1 = number; String value3 = numToRN(_1); number -= _1; return value + value1 + value2 + value3; } /* * A table of all the */ private static String numToRN (int number) { switch (number) { case 1: return &quot;I&quot;; case 2: return &quot;II&quot;; case 3: return &quot;III&quot;; case 4: return &quot;IV&quot;; case 5: return &quot;V&quot;; case 6: return &quot;VI&quot;; case 7: return &quot;VII&quot;; case 8: return &quot;VIII&quot;; case 9: return &quot;IX&quot;; case 10: return &quot;X&quot;; case 20: return &quot;XX&quot;; case 30: return &quot;XXX&quot;; case 40: return &quot;XL&quot;; case 50: return &quot;L&quot;; case 60: return &quot;LX&quot;; case 70: return &quot;LXX&quot;; case 80: return &quot;LXXX&quot;; case 90: return &quot;XC&quot;; case 100: return &quot;C&quot;; case 200: return &quot;CC&quot;; case 300: return &quot;CCC&quot;; case 400: return &quot;CD&quot;; case 500: return &quot;D&quot;; case 600: return &quot;DC&quot;; case 700: return &quot;DCC&quot;; case 800: return &quot;DCCC&quot;; case 900: return &quot;CM&quot;; case 1000: return &quot;M&quot;; case 2000: return &quot;MM&quot;; case 3000: return &quot;MMM&quot;; } return &quot;&quot;; } . Scanner scanner = new Scanner(System.in); PrimitivesTest primitivesTest = new PrimitivesTest(); primitivesTest.randomIntFinder(scanner); primitivesTest.doubleAddingCalculator(scanner); primitivesTest.getRomanNumerals (scanner); scanner.close(); . Enter 2 numbers and get a random integer between those two numbers! Enter the first integer: Enter the next integer: . import java.util.InputMismatchException; import java.util.Random; import java.util.Scanner; void printTest(String str) { System.out.print(str); } . printTest(&quot;HELLO WORLD&quot;); . Scanner scanner = new Scanner(System.in); System.out.printf(&quot;Enter the first integer: &quot;); int intRange1 = scanner.nextInt(); . import java.util.InputMismatchException; import java.util.Random; import java.util.Scanner; public class PrimitivesTest { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); PrimitivesTest primitivesTest = new PrimitivesTest(); primitivesTest.randomIntFinder(scanner); primitivesTest.doubleAddingCalculator(scanner); primitivesTest.getRomanNumerals (scanner); scanner.close(); } public void randomIntFinder(Scanner scanner) { try { System.out.printf(&quot;Enter 2 numbers and get a random &quot; + &quot;integer between those two numbers! n&quot;); scanner = new Scanner(System.in); System.out.printf(&quot;Enter the first integer: &quot;); int intRange1 = scanner.nextInt(); System.out.printf(&quot;Enter the next integer: &quot;); int intRange2 = scanner.nextInt(); Random random = new Random(); int randomInt = random.nextInt(intRange1, intRange2 + 1); System.out.printf(&quot;Random number between %d and %d: %d n n&quot;, intRange1, intRange2, randomInt); } catch (IllegalArgumentException e) { System.out.printf(&quot;Error: The last number must be greater than the first! n&quot;); } catch (InputMismatchException e) { System.out.printf(&quot;Error: Must be type integer! n&quot;); } } public void doubleAddingCalculator(Scanner scanner) { try { System.out.printf(&quot;Enter 2 decimals to get their sum! n&quot;); System.out.printf(&quot;Enter the first double: &quot;); double firstDouble = scanner.nextDouble(); System.out.printf(&quot;Enter the next double: &quot;); double lastDouble = scanner.nextDouble(); firstDouble += lastDouble; System.out.printf(&quot;Sum: %f n n&quot;, firstDouble); } catch (InputMismatchException e) { System.out.printf(&quot;Error: Must be type double! n&quot;); } } public void getRomanNumerals(Scanner scanner) { System.out.print(&quot;Enter any number: &quot;); int num = scanner.nextInt(); String numeral = convertRomanNumeral(num); System.out.print(&quot;Roman numeral: &quot; + numeral); } /* * Takes the number passed in and returns a string of the Roman Numeral */ public static String convertRomanNumeral(int number) { // calculates number of 1000s int _1000 = (number / 1000); String value = numToRN(_1000 * 1000); number -= _1000 * 1000; // calculates number of 100s int _100 = (number / 100); String value1 = numToRN(_100 * 100); number -= _100 * 100; // calculates number of 10s int _10 = (number / 10); String value2 = numToRN(_10 * 10); number -= _10 * 10; // calculates number of 1s int _1 = number; String value3 = numToRN(_1); number -= _1; return value + value1 + value2 + value3; } /* * A table of all the */ private static String numToRN (int number) { switch (number) { case 1: return &quot;I&quot;; case 2: return &quot;II&quot;; case 3: return &quot;III&quot;; case 4: return &quot;IV&quot;; case 5: return &quot;V&quot;; case 6: return &quot;VI&quot;; case 7: return &quot;VII&quot;; case 8: return &quot;VIII&quot;; case 9: return &quot;IX&quot;; case 10: return &quot;X&quot;; case 20: return &quot;XX&quot;; case 30: return &quot;XXX&quot;; case 40: return &quot;XL&quot;; case 50: return &quot;L&quot;; case 60: return &quot;LX&quot;; case 70: return &quot;LXX&quot;; case 80: return &quot;LXXX&quot;; case 90: return &quot;XC&quot;; case 100: return &quot;C&quot;; case 200: return &quot;CC&quot;; case 300: return &quot;CCC&quot;; case 400: return &quot;CD&quot;; case 500: return &quot;D&quot;; case 600: return &quot;DC&quot;; case 700: return &quot;DCC&quot;; case 800: return &quot;DCCC&quot;; case 900: return &quot;CM&quot;; case 1000: return &quot;M&quot;; case 2000: return &quot;MM&quot;; case 3000: return &quot;MMM&quot;; } return &quot;&quot;; } } .",
            "url": "https://natalie-beckwith.github.io/fastpages/2020/08/24/PrimitiveTestJava.html",
            "relUrl": "/2020/08/24/PrimitiveTestJava.html",
            "date": " • Aug 24, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://natalie-beckwith.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Python Code",
            "content": "print(&quot;Hello World!&quot;) . Hello World! .",
            "url": "https://natalie-beckwith.github.io/fastpages/2020/02/20/NatalieNotebookPython.html",
            "relUrl": "/2020/02/20/NatalieNotebookPython.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Java Code",
            "content": "System.out.printf(&quot;Hello World!&quot;); . Hello World! . java.io.PrintStream@3a161461 .",
            "url": "https://natalie-beckwith.github.io/fastpages/2020/02/20/NatalieNotebookJava.html",
            "relUrl": "/2020/02/20/NatalieNotebookJava.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://natalie-beckwith.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://natalie-beckwith.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}